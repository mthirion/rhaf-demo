%dev.quarkus.log.level=DEBUG

## OCP deployment
quarkus.kubernetes-client.trust-certs=true
quarkus.openshift.env.configmaps=kafka-producer-config

# dev config
quarkus.devservices.enabled=false
#%dev.kafka.bootstrap.servers=localhost:9092
#%dev.quarkus.http.port=8090
quarkus.http.port=8080


# Outbound
mp.messaging.outgoing.event-out.connector=smallrye-kafka
mp.messaging.outgoing.event-out.topic=${PRODUCER_TOPIC:event}
mp.messaging.outgoing.event-out.key.serializer=org.apache.kafka.common.serialization.LongSerializer
mp.messaging.outgoing.event-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

# Ensure that message is written at least on one replica
mp.messaging.outgoing.event-out.acks=1
mp.messaging.outgoing.event-out.waitForWriteCompletion=true

# Authentication
#mp.messaging.connector.smallrye-kafka.security.protocol=SASL_PLAINTEXT
#mp.messaging.connector.smallrye-kafka.sasl.mechanism=SCRAM-SHA-512
#mp.messaging.connector.smallrye-kafka.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="quarkus-producer" password="HLt85Q9PdE9q";


#mp.messaging.outgoing.event-out.key.serializer=org.apache.kafka.common.serialization.StringSerializer
#mp.messaging.outgoing.event-out.value.serializer=io.apicurio.registry.utils.serde.AvroKafkaSerializer
#mp.messaging.connector.smallrye-kafka.apicurio.registry.url=http://service-registry.apps.cluster-qrc9q.qrc9q.sandbox1217.opentlc.com.router-default.apps.cluster-qrc9q.qrc9q.sandbox1217.opentlc.com/
#kafka.apicurio.registry.auto-register=true

# Distributed tracing
quarkus.application.name=kafka-producer
#quarkus.opentelemetry.enabled=true
#quarkus.opentelemetry.tracer.exporter.otlp.endpoint=${COLLECTOR_ENDPOINT:http://jaeger-all-in-one-inmemory-collector:4317}
